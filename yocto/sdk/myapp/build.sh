#!/bin/sh

top_dir="$(cd "$(dirname "$0")" > /dev/null 2>&1 && pwd)"

. ~/poky_sdk/environment-setup-aarch64-poky-linux > /dev/null

recipe=myapp
url=`pwd`/myapp-0.0.1.tar.gz

image=core-image-minimal

workspace=$HOME/poky_sdk/workspace

usage()
{
  echo "usage : $0 [options] target1 target2 ..."
  echo "  target: init, add, update, build"
}

help()
{
  usage
}

init()
{
  mkdir -p $workspace/conf/

  cat - << 'EOS' > $workspace/conf/layer.conf
# ### workspace layer auto-generated by devtool ###
BBPATH =. "${LAYERDIR}:"
BBFILES += "${LAYERDIR}/recipes/*/*.bb \
            ${LAYERDIR}/appends/*.bbappend"
BBFILE_COLLECTIONS += "workspacelayer"
BBFILE_PATTERN_workspacelayer = "^${LAYERDIR}/"
BBFILE_PATTERN_IGNORE_EMPTY_workspacelayer = "1"
BBFILE_PRIORITY_workspacelayer = "99"
EOS

}

configure()
{
  :
}

add()
{
  cmd="devtool add $recipe $url"
  echo $cmd; $cmd
}

_add_git_bb()
{
  #recipefile=$workspace/recipes/${recipe}/${recipe}_git.bb
  recipefile=$workspace/recipes/${recipe}/${recipe}.bb

  cat - << 'EOS' >> $recipefile
LICENSE = "MIT"
LIC_FILES_CHKSUM = "file://${COMMON_LICENSE_DIR}/MIT;md5=0835ade698e0bcf8506ecda2f7b4f302"

do_configure_prepend() {
  echo "S is ${S}"
  echo "This is do_configure_prepend."
  #autoreconf -vi
}
EOS


}

edit()
{
  devtool edit-recipe $recipe
}

build()
{
  cmd="devtool build $recipe"
  echo $cmd; $cmd

  
  cmd="devtool package $recipe"
  echo $cmd; $cmd
}

package()
{
  cmd="devtool package $recipe"
  echo $cmd; $cmd
}

check()
{
  :
}

install()
{
  :
}

image()
{
  devtool build-image $image
}

run()
{
  machine="qemuarm64"
  memsize="4096"
  cpus="4"

  params="-m $memsize -smp $cpus"

  runqemu nographic \
    qemuparams="-m 4096" ${image}

}

clean()
{
  rm -rf $HOME/poky_sdk/workspace/recipes/$recipe/
  rm -rf $HOME/poky_sdk/workspace/appends/${recipe}_*
  rm -rf $HOME/poky_sdk/workspace/sources/${recipe}*
}

all()
{
  clean
  init
  add
  update
  build
}

args=""

while [ $# -ne 0 ]; do
  case "$1" in
    -h | --help)
      usage
      exit 1
      ;;
    -o | --output)
      shift
      output=$1
      ;;
    -l | --logfile)
      shift
      logfile=$1
      ;;
    *)
      args="$args $1"
      ;;
  esac

  shift
done

if [ -z "$args" ]; then
  usage
  exit 1
fi

for arg in $args; do
  LANG=C type "$arg" | grep 'function' > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    $arg
  else
    echo "ERROR : $arg is NOT a shell function"
    exit 1
  fi
done

